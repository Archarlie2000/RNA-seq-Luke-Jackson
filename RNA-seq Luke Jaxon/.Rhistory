# Extract the base file name for saving purposes
file_name <- basename(file)
# Load the mapped data for KEGG analysis
mapped_data <- read.delim(file, sep = "\t", header = TRUE)
result_prefix <- sub("\\.csv$", "", file_name)  # Remove .csv extension
# Create a subfolder for each comparison result
comparison_directory <- file.path(output_directory, result_prefix)
dir.create(comparison_directory, showWarnings = FALSE)
# Convert row names to a column named "ensembl_transcript_id"
mapped_data$ensembl_transcript_id <- rownames(mapped_data)
rownames(mapped_data) <- NULL
# Reorder columns to put "ensembl_transcript_id" first
mapped_data <- mapped_data[, c("ensembl_transcript_id", colnames(mapped_data)[-ncol(mapped_data)])]
View(mapped_data)
# Reorder columns to put "ensembl_transcript_id" first
mapped_data <- mapped_data[, c("ensembl_transcript_id", colnames(mapped_data)[-ncol(mapped_data)])]
# Extract the Ensembl Transcript IDs
ensembl_ids <- mapped_data$ensembl_transcript_id
# Convert Ensembl Transcript IDs to Entrez Gene IDs using biomaRt
conversion_results <- getBM(attributes = c('ensembl_transcript_id', 'entrezgene_id'),
filters = 'ensembl_transcript_id',
values = ensembl_ids,
mart = ensembl)
# Merge conversion results with the original data to keep only mapped genes
mapped_data <- merge(mapped_data, conversion_results, by = "ensembl_transcript_id")
# Extract the gene list for KEGG analysis (Entrez Gene IDs)
gene_list <- mapped_data$entrezgene_id
# Perform KEGG analysis for rats ('rno')
keggr <- enrichKEGG(gene = gene_list,
organism = "rno",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
# Convert KEGG results to a readable format
if (!is.null(keggr)) {
keggr <- setReadable(keggr, OrgDb = org.Rn.eg.db, keyType = "ENTREZID")
# Save the KEGG pathway gene enrichment analysis
result_file <- file.path(comparison_directory, paste0(result_prefix, "_kegg_enrichment_results.csv"))
write.csv(as.data.frame(keggr), result_file)
# Append results to the comprehensive results data frame
enriched_df <- as.data.frame(keggr)
enriched_df$Comparison <- result_prefix  # Add a column for identifying the comparison
all_results <- rbind(all_results, enriched_df)
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Create KEGG pathways using gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "rno",
out.suffix = paste0(result_prefix, "_", pathway),
kegg.dir = comparison_directory)
}
}
# Load required libraries
library(clusterProfiler)
library(org.Rn.eg.db)       # Rat-specific database
library(pathview)           # For KEGG pathway visualization
library(biomaRt)            # For ID conversion
# Directory containing the map files
input_directory <- "../DEG_results"
# Directory to save the comparison results
output_directory <- "../KEGG_Results"
# List all files in the input directory
map_files <- list.files(input_directory, full.names = TRUE)
# Initialize a data frame to store all KEGG enrichment results
all_results <- data.frame()
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# file <- "../DEG_results/DEG_results_ALL_Cell_11mM_vs_Control.tsv"
# Iterate through each map file and perform the analysis
for (file in map_files) {
# Extract the base file name for saving purposes
file_name <- basename(file)
# Load the mapped data for KEGG analysis
mapped_data <- read.delim(file, sep = "\t", header = TRUE)
result_prefix <- sub("\\.csv$", "", file_name)  # Remove .csv extension
# Create a subfolder for each comparison result
comparison_directory <- file.path(output_directory, result_prefix)
dir.create(comparison_directory, showWarnings = FALSE)
# Convert row names to a column named "ensembl_transcript_id"
mapped_data$ensembl_transcript_id <- rownames(mapped_data)
rownames(mapped_data) <- NULL
# Reorder columns to put "ensembl_transcript_id" first
mapped_data <- mapped_data[, c("ensembl_transcript_id", colnames(mapped_data)[-ncol(mapped_data)])]
# Extract the Ensembl Transcript IDs
ensembl_ids <- mapped_data$ensembl_transcript_id
# Convert Ensembl Transcript IDs to Entrez Gene IDs using biomaRt
conversion_results <- getBM(attributes = c('ensembl_transcript_id', 'entrezgene_id'),
filters = 'ensembl_transcript_id',
values = ensembl_ids,
mart = ensembl)
# Merge conversion results with the original data to keep only mapped genes
mapped_data <- merge(mapped_data, conversion_results, by = "ensembl_transcript_id")
# Extract the gene list for KEGG analysis (Entrez Gene IDs)
gene_list <- mapped_data$entrezgene_id
# Perform KEGG analysis for rats ('rno')
keggr <- enrichKEGG(gene = gene_list,
organism = "rno",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
# Convert KEGG results to a readable format
if (!is.null(keggr)) {
keggr <- setReadable(keggr, OrgDb = org.Rn.eg.db, keyType = "ENTREZID")
# Save the KEGG pathway gene enrichment analysis
result_file <- file.path(comparison_directory, paste0(result_prefix, "_kegg_enrichment_results.csv"))
write.csv(as.data.frame(keggr), result_file)
# Append results to the comprehensive results data frame
enriched_df <- as.data.frame(keggr)
enriched_df$Comparison <- result_prefix  # Add a column for identifying the comparison
all_results <- rbind(all_results, enriched_df)
# Get the list of significant KEGG pathways
pathway_list <- keggr$ID[keggr$qvalue < 0.05]
# Create KEGG pathways using gene_list expression values from significant pathways
for (pathway in pathway_list) {
pathview(gene.data = gene_list, pathway.id = pathway, species = "rno",
out.suffix = paste0(result_prefix, "_", pathway),
kegg.dir = comparison_directory)
}
}
}
# Load required libraries
library(clusterProfiler)
library(org.Rn.eg.db)       # Rat-specific database
library(pathview)           # For KEGG pathway visualization
library(biomaRt)            # For ID conversion
# Directory containing the map files
input_directory <- "../DEG_results"
# Directory to save the comparison results
output_directory <- "../KEGG_Results"
# List all files in the input directory
map_files <- list.files(input_directory, full.names = TRUE)
# Initialize a data frame to store all KEGG enrichment results
all_results <- data.frame()
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# file <- "../DEG_results/DEG_results_ALL_Cell_11mM_vs_Control.tsv"
# Iterate through each map file and perform the analysis
for (file in map_files) {
# Extract the base file name for saving purposes
file_name <- basename(file)
# Load the mapped data for KEGG analysis
mapped_data <- read.delim(file, sep = "\t", header = TRUE)
result_prefix <- sub("\\.csv$", "", file_name)  # Remove .csv extension
# Create a subfolder for each comparison result
comparison_directory <- file.path(output_directory, result_prefix)
dir.create(comparison_directory, showWarnings = FALSE)
# Convert row names to a column named "ensembl_transcript_id"
mapped_data$ensembl_transcript_id <- rownames(mapped_data)
rownames(mapped_data) <- NULL
# Reorder columns to put "ensembl_transcript_id" first
mapped_data <- mapped_data[, c("ensembl_transcript_id", colnames(mapped_data)[-ncol(mapped_data)])]
# Extract the Ensembl Transcript IDs
ensembl_ids <- mapped_data$ensembl_transcript_id
# Convert Ensembl Transcript IDs to Entrez Gene IDs using biomaRt
conversion_results <- getBM(attributes = c('ensembl_transcript_id', 'entrezgene_id'),
filters = 'ensembl_transcript_id',
values = ensembl_ids,
mart = ensembl)
# Merge conversion results with the original data to keep only mapped genes
mapped_data <- merge(mapped_data, conversion_results, by = "ensembl_transcript_id")
# Extract the gene list for KEGG analysis (Entrez Gene IDs)
gene_list <- mapped_data$entrezgene_id
# Perform KEGG analysis for rats ('rno')
keggr <- enrichKEGG(gene = gene_list,
organism = "rno",
keyType = "ncbi-geneid",
pvalueCutoff = 0.05)
# Convert KEGG results to a readable format
if (!is.null(keggr)) {
keggr <- setReadable(keggr, OrgDb = org.Rn.eg.db, keyType = "ENTREZID")
# Save the KEGG pathway gene enrichment analysis
result_prefix <- sub("\\.csv$", "", file_name)  # Remove .csv extension
result_file <- file.path(output_directory, paste0(result_prefix, "_kegg_enrichment_results.csv"))
write.csv(as.data.frame(keggr), result_file)
# Append results to the comprehensive results data frame
enriched_df <- as.data.frame(keggr)
enriched_df$Comparison <- result_prefix  # Add a column for identifying the comparison
all_results <- rbind(all_results, enriched_df)
}
}
# Save the comprehensive results to a CSV file
write.csv(all_results, file.path(output_directory, "comprehensive_kegg_enrichment_results.csv"))
library(ggplot2)
library(dplyr)
library(knitr)
library(htmltools)
library(DT)
# Read the data and name the first column as 'Pathway'
kegg_results <- read.csv("../KEGG _Results/comprehensive_kegg_enrichment_results.csv")
setwd("~/RNA-seq Luke Jaxon/Scripts")
# Read the data and name the first column as 'Pathway'
kegg_results <- read.csv("../KEGG _Results/comprehensive_kegg_enrichment_results.csv")
# Read the data and name the first column as 'Pathway'
kegg_results <- read.csv("../KEGG_Results/comprehensive_kegg_enrichment_results.csv")
kegg_results$clean_name <- gsub("\\.tsv", "", gsub("_", " ", gsub("mapped_data_DEG_results_", "", kegg_results$Comparison)))
colnames(kegg_results)[1] <- "Pathway"
tables <- list()
for (comp in unique(kegg_results$Comparison)) {
# Filter data for the specific comparison
comp_data <- kegg_results %>% filter(Comparison == comp)
# Aggregate by 'subcategory' and order by p.adjust
comp_data <- comp_data %>%
group_by(subcategory) %>%
arrange(p.adjust) %>%
ungroup()
# Select top 10 results for the table
top10_data <- comp_data %>%
arrange(p.adjust) %>%
mutate(
p.adjust = round(-log10(p.adjust),1 ),
pvalue = round(-log10(pvalue),1 ),
qvalue = round(-log10(qvalue), 1),
Description = gsub(" ?- Mus musculus \\(house mouse\\)", "", Description)
) %>%
dplyr::select(-Pathway, -qvalue, -Count, -ID)
# Store the datatable in the list
tables[[comp]] <- DT::datatable(
top10_data %>% dplyr::select(-Comparison, -clean_name),
caption = paste("Enriched Pathways for:", unique(kegg_results$clean_name[kegg_results$Comparison == comp])),
options = list(pageLength = -1, scrollX = TRUE, dom = 't'),
rownames = FALSE)%>%
DT::formatStyle(
columns = colnames(top10_data %>% dplyr::select(-Comparison, -clean_name)),
`white-space` = 'nowrap',
`text-align` = 'center'
)
}
# Render all tables
htmltools::tagList(tables)
library(clusterProfiler)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
# Load required libraries
library(clusterProfiler)
library(org.Rn.eg.db)       # Rat-specific database
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Rn.eg.db")
# Load required libraries
library(clusterProfiler)
library(org.Rn.eg.db)       # Rat-specific database
library(biomaRt)            # For ID conversion
library(orthologsBioMART)   # For finding human orthologs
install.packages("BiocManager")
BiocManager::install(c("vitkl/orthologsBioMART"), dependencies=T)
install.packages("BiocManager")
library(orthologsBioMART)   # For finding human orthologs
library(orthologsBioMART)   # For finding human orthologs
library(orthologsBioMART)   # For finding human orthologs
install.packages("BiocManager")
BiocManager::install(c("vitkl/orthologsBioMART"), dependencies=T)
# Initialize an empty data frame
deg_data <- data.frame()
# Load required libraries
library(clusterProfiler)
library(org.Rn.eg.db)       # Rat-specific database
library(biomaRt)            # For ID conversion
library(orthologsBioMART)   # For finding human orthologs
library(dplyr)              # For data manipulation
library(graphite)           # For pathways
library(SPIA)               # For SPIA analysis
# Set the directory containing the DEG files and create the output directory
deg_directory <- "../DEG_Results"
output_directory <- "../KEGG_Human_Ortholog_Results"
dir.create(output_directory, showWarnings = FALSE)
# Get the list of file names in the directory
files <- list.files(deg_directory, pattern = "*.tsv", full.names = TRUE)
# Load and combine DEG results into a list, treating the first column as row names (gene IDs)
deg_list <- lapply(files, function(file) {
data <- read.table(file, header = TRUE, sep = "\t", row.names = 1, fill = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
data$GeneID <- rownames(data)
return(data)
})
# Set up biomaRt to use Ensembl for rat
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# Function to convert Ensembl transcript IDs to Ensembl gene IDs
convert_to_gene_ids <- function(transcript_ids) {
gene_mapping <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_ids,
mart = ensembl)
return(gene_mapping)
}
# Function to map Ensembl Gene IDs to Entrez IDs using the rat database
map_to_entrez <- function(df, dataset_name) {
transcript_ids <- df$GeneID
gene_mapping <- convert_to_gene_ids(transcript_ids)
unmapped_genes <- setdiff(transcript_ids, gene_mapping$ensembl_transcript_id)
unmapped_genes_list[[dataset_name]] <<- unmapped_genes
# Merge with the original data to get the Ensembl gene IDs
df_mapped <- merge(df, gene_mapping, by.x = "GeneID", by.y = "ensembl_transcript_id")
# Use bitr() to convert Ensembl gene IDs to Entrez IDs
mapped_ids <- bitr(df_mapped$ensembl_gene_id, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Rn.eg.db)
# Handle the case where some IDs fail to map
if (nrow(mapped_ids) == 0) {
warning(paste0("No gene IDs were mapped for dataset: ", dataset_name))
return(NULL)
}
df_final <- merge(df_mapped, mapped_ids, by.x = "ensembl_gene_id", by.y = "ENSEMBL", all.x = TRUE)
# Include logFC, logCPM, and LR in the final annotation files
df_final <- df_final %>% dplyr::select(GeneID, ensembl_gene_id, ENTREZID, logFC, logCPM, LR, FDR)
# Save the intermediate mapped data frame in the output directory
write.csv(df_final, file.path(output_directory, paste0("mapped_data_", dataset_name, ".csv")), row.names = FALSE)
return(df_final)
}
# Initialize a list to store unmapped genes for each dataset
unmapped_genes_list <- list()
# Apply the mapping function to all DEG data frames
mapped_deg_list <- lapply(seq_along(deg_list), function(i) {
dataset_name <- basename(files[i])  # Extract the file name for use in output files
map_to_entrez(deg_list[[i]], dataset_name)
})
# Function to map mouse Ensembl gene IDs to human orthologs
map_to_human_orthologs <- function(df, dataset_name) {
# Extract unique Ensembl gene IDs
vec_ids <- unique(df$ensembl_gene_id)
# Map rat Ensembl gene IDs to human orthologs
orthologs <- findOrthologsMmHs(from_filters = "ensembl_gene_id",
from_values = vec_ids,
to_attributes = "ensembl_gene_id")
# Rename columns to avoid conflicts
colnames(orthologs) <- c("ensembl_gene_id", "human_ensembl_gene_id")
# Merge orthologs with the main data frame
df_final <- merge(df, orthologs, by = "ensembl_gene_id", all.x = TRUE)
# Save the data with human orthologs in the output directory
write.csv(df_final, file.path(output_directory, paste0("mapped_with_human_orthologs_", dataset_name, ".csv")), row.names = FALSE)
return(df_final)
}
# Apply the human ortholog mapping to all DEG data frames
human_mapped_deg_list <- lapply(seq_along(mapped_deg_list), function(i) {
dataset_name <- basename(files[i])  # Extract the file name for use in output files
map_to_human_orthologs(mapped_deg_list[[i]], dataset_name)
})
# Load pathways and prepare for SPIA
reactome <- pathways("hsapiens", "reactome")
reactome <- convertIdentifiers(reactome, "ENTREZID")
# Load necessary libraries
library(orthologsBioMART)
library(biomaRt)
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
# Function to convert Ensembl transcript IDs to Ensembl gene IDs
convert_to_gene_ids <- function(transcript_ids) {
gene_mapping <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_ids,
mart = ensembl)
return(gene_mapping)
}
# Set the directory containing the TSV files
directory <- "../DEG_results"
# Read all TSV files and combine them into one data frame
files <- list.files(directory, pattern = "*.tsv", full.names = TRUE)
# Initialize an empty data frame
deg_data <- data.frame()
# file <- "DEG Results/DEG_results_eCig_4_vs_Control.tsv"
# Loop through each file, read its contents, and add it to the main data frame
for (file in files) {
# Read the TSV file
temp_data <- read.delim(file, header = FALSE)
# Set column names for the data frame
colnames(temp_data) <- c("Transcript_ID", "logFC", "logCPM", "LR", "PValue", "FDR")
# Add a column to indicate the source file
temp_data$source <- basename(file)
# Combine the data into the main data frame
deg_data <- rbind(deg_data, temp_data)
}
# Extract unique Ensembl transcript IDs
transcript_ids <- unique(deg_data$Transcript_ID)
# Convert transcript IDs to gene IDs
gene_mapping <- convert_to_gene_ids(transcript_ids)
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# Load necessary libraries
library(orthologsBioMART)
library(biomaRt)
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# Function to convert Ensembl transcript IDs to Ensembl gene IDs
convert_to_gene_ids <- function(transcript_ids) {
gene_mapping <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_ids,
mart = ensembl)
return(gene_mapping)
}
# Set the directory containing the TSV files
directory <- "../DEG_results"
# Read all TSV files and combine them into one data frame
files <- list.files(directory, pattern = "*.tsv", full.names = TRUE)
# Initialize an empty data frame
deg_data <- data.frame()
# file <- "DEG Results/DEG_results_eCig_4_vs_Control.tsv"
# Loop through each file, read its contents, and add it to the main data frame
for (file in files) {
# Read the TSV file
temp_data <- read.delim(file, header = FALSE)
# Set column names for the data frame
colnames(temp_data) <- c("Transcript_ID", "logFC", "logCPM", "LR", "PValue", "FDR")
# Add a column to indicate the source file
temp_data$source <- basename(file)
# Combine the data into the main data frame
deg_data <- rbind(deg_data, temp_data)
}
# Extract unique Ensembl transcript IDs
transcript_ids <- unique(deg_data$Transcript_ID)
# Convert transcript IDs to gene IDs
gene_mapping <- convert_to_gene_ids(transcript_ids)
# Read all TSV files and combine them into one data frame
files <- list.files(directory, pattern = "*.tsv", full.names = TRUE)
files
setwd("~/RNA-seq Luke Jaxon/Scripts")
# Load necessary libraries
library(orthologsBioMART)
library(biomaRt)
# Set up biomaRt to use Ensembl
ensembl <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
# Function to convert Ensembl transcript IDs to Ensembl gene IDs
convert_to_gene_ids <- function(transcript_ids) {
gene_mapping <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_ids,
mart = ensembl)
return(gene_mapping)
}
# Set the directory containing the TSV files
directory <- "../DEG_results"
# Read all TSV files and combine them into one data frame
files <- list.files(directory, pattern = "*.tsv", full.names = TRUE)
# Initialize an empty data frame
deg_data <- data.frame()
# Loop through each file, read its contents, and add it to the main data frame
for (file in files) {
# Read the TSV file
temp_data <- read.delim(file, header = FALSE)
# Set column names for the data frame
colnames(temp_data) <- c("Transcript_ID", "logFC", "logCPM", "LR", "PValue", "FDR")
# Add a column to indicate the source file
temp_data$source <- basename(file)
# Combine the data into the main data frame
deg_data <- rbind(deg_data, temp_data)
}
# Extract unique Ensembl transcript IDs
transcript_ids <- unique(deg_data$Transcript_ID)
# Convert transcript IDs to gene IDs
gene_mapping <- convert_to_gene_ids(transcript_ids)
# Merge the gene mapping with the main data frame
deg_data <- merge(deg_data, gene_mapping, by.x = "Transcript_ID", by.y = "ensembl_transcript_id")
# Extract unique Ensembl gene IDs
vec_ids <- unique(deg_data$ensembl_gene_id)
# Map mouse Ensembl gene IDs to human orthologs
orthologs <- findOrthologsMmHs(from_filters = "ensembl_gene_id",
from_values = vec_ids,
to_attributes = "ensembl_gene_id")
vec_ids
# Map mouse Ensembl gene IDs to human orthologs
orthologs <- findOrthologsMmHs(from_filters = "ensembl_gene_id",
from_values = vec_ids,
to_attributes = "ensembl_gene_id")
vec_ids
# Load necessary libraries
library(biomaRt)
# Set up biomaRt to use Ensembl for rat and human
rat <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
human <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Function to convert Ensembl transcript IDs to Ensembl gene IDs
convert_to_gene_ids <- function(transcript_ids) {
gene_mapping <- getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_ids,
mart = rat)
return(gene_mapping)
}
# Set the directory containing the TSV files
directory <- "../DEG_results"
# Read all TSV files and combine them into one data frame
files <- list.files(directory, pattern = "*.tsv", full.names = TRUE)
# Initialize an empty data frame
deg_data <- data.frame()
# Loop through each file, read its contents, and add it to the main data frame
for (file in files) {
# Read the TSV file
temp_data <- read.delim(file, header = FALSE)
# Set column names for the data frame
colnames(temp_data) <- c("Transcript_ID", "logFC", "logCPM", "LR", "PValue", "FDR")
# Add a column to indicate the source file
temp_data$source <- basename(file)
# Combine the data into the main data frame
deg_data <- rbind(deg_data, temp_data)
}
# Extract unique Ensembl transcript IDs
transcript_ids <- unique(deg_data$Transcript_ID)
# Convert transcript IDs to gene IDs
gene_mapping <- convert_to_gene_ids(transcript_ids)
# Merge the gene mapping with the main data frame
deg_data <- merge(deg_data, gene_mapping, by.x = "Transcript_ID", by.y = "ensembl_transcript_id")
# Extract unique Ensembl gene IDs
vec_ids <- unique(deg_data$ensembl_gene_id)
vec_ids
# Find orthologs of rat Ensembl gene IDs in human
orthologs <- getLDS(attributes = c("ensembl_gene_id"),
filters = "ensembl_gene_id",
values = vec_ids,
mart = rat,
attributesL = c("ensembl_gene_id"),
martL = human)
# Find orthologs of rat Ensembl gene IDs in human
orthologs <- getLDS(attributes = c("ensembl_gene_id"),
filters = "ensembl_gene_id",
values = vec_ids,
mart = rat,
attributesL = c("ensembl_gene_id"),
martL = human)
